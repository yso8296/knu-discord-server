name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    env:
      REDIRECT_URL: ${{ secrets.REDIRECT_URL }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: $ {{ secrets.REDIS_PORT }}
      COM_URL: ${{ secrets.COM_URL }}
      CLS_URL: ${{ secrets.CLS_URL }}
      CLG_URL: ${{ secrets.CLG_URL }}
      JOB_URL: ${{ secrets.JOB_URL }}
      SCH_URL: ${{ secrets.SCH_URL }}
      EVT_URL: ${{ secrets.EVT_URL }}
      ETC_URL: ${{ secrets.ETC_URL }}
      WEEKLY_URL: ${{ secrets.WEEKLY_URL }}

    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 테스트 및 빌드하기x
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker Hub에 로그인하기
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker 이미지 생성
        run: |
          docker build --build-arg REDIRECT_URL="${{ secrets.REDIRECT_URL }}" \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USERNAME="${{ secrets.DB_USERNAME }}" \
          --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
          --build-arg REDIS_PORT="${{ secrets.REDIS_PORT }}" \
          --build-arg COM_URL="${{ secrets.COM_URL }}" \
          --build-arg CLS_URL="${{ secrets.CLS_URL }}" \
          --build-arg CLG_URL="${{ secrets.CLG_URL }}" \
          --build-arg JOB_URL="${{ secrets.JOB_URL }}" \
          --build-arg SCH_URL="${{ secrets.SCH_URL }}" \
          --build-arg EVT_URL="${{ secrets.EVT_URL }}" \
          --build-arg ETC_URL="${{ secrets.ETC_URL }}" \
          --build-arg WEEKLY_URL="${{ secrets.WEEKLY_URL }}" \
          -t knu-notice-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag knu-notice-server ${{ secrets.DOCKERHUB_USERNAME }}/knu-notice-server:latest

      - name: Docker Hub에 Docker 이미지 Push하기
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/knu-notice-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "${{ secrets.ENV_VARS }}" | tr -d '\r' | sudo tee .env > /dev/null
            docker-compose down || true
            docker-compose pull || true
            docker-compose up -d
          
      
       
